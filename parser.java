
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 23 06:51:57 BST 2013
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;
import java.util.*;
import java.lang.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 23 06:51:57 BST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\042\004\000\002\042\003\000\002\042\003\000\002" +
    "\025\004\000\002\025\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\022\012\000\002\017\005" +
    "\000\002\016\005\000\002\020\004\000\002\020\002\000" +
    "\002\030\007\000\002\021\003\000\002\021\003\000\002" +
    "\023\004\000\002\023\002\000\002\024\005\000\002\024" +
    "\002\000\002\031\006\000\002\031\005\000\002\026\004" +
    "\000\002\026\003\000\002\032\004\000\002\032\002\000" +
    "\002\033\003\000\002\033\004\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\015\000\002\036\012\000\002\035\013\000\002\040\006" +
    "\000\002\041\005\000\002\041\004\000\002\037\006\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\010\003\000\002\010\005\000\002\013\005\000\002\012" +
    "\005\000\002\014\005\000\002\014\003\000\002\014\002" +
    "\000\002\003\003\000\002\003\004\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\010\000\002\003\007\000\002\003\007\000" +
    "\002\003\006\000\002\005\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\006" +
    "\005\000\002\006\003\000\002\007\004\000\002\007\003" +
    "\000\002\004\003\000\002\004\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\006\000\002\004\003\000\002\004" +
    "\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\014\003\013\010\020\035\012\036\011\037" +
    "\014\001\002\000\012\010\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\001\002\000\012\010\ufff1\035\ufff1\036\ufff1\037\ufff1\001" +
    "\002\000\012\010\ufff3\035\ufff3\036\ufff3\037\ufff3\001\002" +
    "\000\004\002\ufff7\001\002\000\004\002\271\001\002\000" +
    "\004\035\260\001\002\000\004\007\167\001\002\000\004" +
    "\002\ufff6\001\002\000\004\035\247\001\002\000\006\004" +
    "\uffec\040\244\001\002\000\012\010\020\035\012\036\011" +
    "\037\014\001\002\000\012\010\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\001\002\000\016\011\uffdf\035\033\062\032\064\023" +
    "\066\036\070\021\001\002\000\004\016\232\001\002\000" +
    "\016\011\uffdc\035\uffdc\062\uffdc\064\uffdc\066\uffdc\070\uffdc" +
    "\001\002\000\004\010\222\001\002\000\016\011\uffde\035" +
    "\uffde\062\uffde\064\uffde\066\uffde\070\uffde\001\002\000\016" +
    "\011\uffda\035\uffda\062\uffda\064\uffda\066\uffda\070\uffda\001" +
    "\002\000\016\011\uffdb\035\uffdb\062\uffdb\064\uffdb\066\uffdb" +
    "\070\uffdb\001\002\000\006\006\163\040\217\001\002\000" +
    "\016\011\uffdf\035\033\062\032\064\023\066\036\070\021" +
    "\001\002\000\004\004\213\001\002\000\004\016\201\001" +
    "\002\000\012\006\uffce\007\167\016\155\040\uffce\001\002" +
    "\000\016\011\uffdf\035\047\062\032\064\023\066\036\070" +
    "\021\001\002\000\004\011\165\001\002\000\034\004\042" +
    "\012\062\014\044\016\066\030\057\031\060\032\050\033" +
    "\051\034\064\035\047\041\045\045\063\052\061\001\002" +
    "\000\016\011\uffe1\035\uffe1\062\uffe1\064\uffe1\066\uffe1\070" +
    "\uffe1\001\002\000\016\011\uffd9\035\uffd9\062\uffd9\064\uffd9" +
    "\066\uffd9\070\uffd9\001\002\000\060\004\uffad\005\uffad\006" +
    "\163\007\uffad\012\uffad\013\uffad\015\uffad\017\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051" +
    "\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad" +
    "\061\uffad\001\002\000\016\011\uffd3\035\uffd3\062\uffd3\064" +
    "\uffd3\066\uffd3\070\uffd3\001\002\000\056\004\uffae\005\uffae" +
    "\007\uffae\012\uffae\013\uffae\015\uffae\017\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\001\002\000\036\005\uffc8\012\062\014\044\015\uffc8" +
    "\016\066\030\057\031\060\032\050\033\051\034\064\035" +
    "\047\041\045\045\063\052\061\001\002\000\032\012\062" +
    "\014\044\016\066\030\057\031\060\032\050\033\051\034" +
    "\064\035\047\041\045\045\063\052\061\001\002\000\056" +
    "\004\uffa7\005\uffa7\007\uffa7\012\uffa7\013\uffa7\015\uffa7\017" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\061\uffa7\001\002\000\064\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\012\uffce\013\uffce\015\uffce\016\155\017" +
    "\uffce\040\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\060\uffce\061\uffce\001\002\000\056\004\uffaa" +
    "\005\uffaa\007\uffaa\012\uffaa\013\uffaa\015\uffaa\017\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060" +
    "\uffaa\061\uffaa\001\002\000\056\004\uffa5\005\uffa5\007\uffa5" +
    "\012\uffa5\013\uffa5\015\uffa5\017\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\001" +
    "\002\000\034\004\154\012\071\042\104\044\077\045\070" +
    "\051\074\053\076\054\101\055\073\056\100\057\102\060" +
    "\075\061\072\001\002\000\056\004\uffa4\005\uffa4\007\uffa4" +
    "\012\uffa4\013\uffa4\015\uffa4\017\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\001" +
    "\002\000\056\004\uffb6\005\uffb6\007\uffb6\012\uffb6\013\uffb6" +
    "\015\uffb6\017\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\060\uffb6\061\uffb6\001\002\000\056\004" +
    "\uffb0\005\uffb0\007\uffb0\012\uffb0\013\uffb0\015\uffb0\017\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\152\051\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\001\002\000\056\004\uffc7\005\uffc7\007" +
    "\uffc7\012\uffc7\013\uffc7\015\uffc7\017\uffc7\042\uffc7\043\106" +
    "\044\uffc7\045\uffc7\046\111\047\110\050\107\051\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\001\002\000\056\004\uffa9\005\uffa9\007\uffa9\012\uffa9\013" +
    "\uffa9\015\uffa9\017\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\050\uffa9\051\uffa9\053\uffa9\054\uffa9\055" +
    "\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\001\002\000\056" +
    "\004\uffab\005\uffab\007\uffab\012\uffab\013\uffab\015\uffab\017" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057" +
    "\uffab\060\uffab\061\uffab\001\002\000\004\016\147\001\002" +
    "\000\036\005\uffc8\012\062\013\uffc8\014\044\016\066\030" +
    "\057\031\060\032\050\033\051\034\064\035\047\041\045" +
    "\045\063\052\061\001\002\000\030\012\062\014\044\016" +
    "\066\030\057\031\060\032\050\033\051\034\064\035\047" +
    "\045\063\052\061\001\002\000\056\004\uffa8\005\uffa8\007" +
    "\uffa8\012\uffa8\013\uffa8\015\uffa8\017\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\053" +
    "\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8" +
    "\001\002\000\056\004\uffa3\005\uffa3\007\uffa3\012\uffa3\013" +
    "\uffa3\015\uffa3\017\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\051\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\001\002\000\032" +
    "\012\062\014\044\016\066\030\057\031\060\032\050\033" +
    "\051\034\064\035\047\041\045\045\063\052\061\001\002" +
    "\000\034\012\071\017\103\042\104\044\077\045\070\051" +
    "\074\053\076\054\101\055\073\056\100\057\102\060\075" +
    "\061\072\001\002\000\030\012\062\014\044\016\066\030" +
    "\057\031\060\032\050\033\051\034\064\035\047\045\063" +
    "\052\061\001\002\000\034\007\127\012\062\014\044\016" +
    "\066\030\057\031\060\032\050\033\051\034\064\035\047" +
    "\041\045\045\063\052\061\001\002\000\030\012\062\014" +
    "\044\016\066\030\057\031\060\032\050\033\051\034\064" +
    "\035\047\045\063\052\061\001\002\000\030\012\062\014" +
    "\044\016\066\030\057\031\060\032\050\033\051\034\064" +
    "\035\047\045\063\052\061\001\002\000\030\012\062\014" +
    "\044\016\066\030\057\031\060\032\050\033\051\034\064" +
    "\035\047\045\063\052\061\001\002\000\030\012\062\014" +
    "\044\016\066\030\057\031\060\032\050\033\051\034\064" +
    "\035\047\045\063\052\061\001\002\000\030\012\062\014" +
    "\044\016\066\030\057\031\060\032\050\033\051\034\064" +
    "\035\047\045\063\052\061\001\002\000\030\012\062\014" +
    "\044\016\066\030\057\031\060\032\050\033\051\034\064" +
    "\035\047\045\063\052\061\001\002\000\030\012\062\014" +
    "\044\016\066\030\057\031\060\032\050\033\051\034\064" +
    "\035\047\045\063\052\061\001\002\000\030\012\062\014" +
    "\044\016\066\030\057\031\060\032\050\033\051\034\064" +
    "\035\047\045\063\052\061\001\002\000\030\012\062\014" +
    "\044\016\066\030\057\031\060\032\050\033\051\034\064" +
    "\035\047\045\063\052\061\001\002\000\056\004\uffac\005" +
    "\uffac\007\uffac\012\uffac\013\uffac\015\uffac\017\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac" +
    "\061\uffac\001\002\000\030\012\062\014\044\016\066\030" +
    "\057\031\060\032\050\033\051\034\064\035\047\045\063" +
    "\052\061\001\002\000\056\004\uffc3\005\uffc3\007\uffc3\012" +
    "\uffc3\013\uffc3\015\uffc3\017\uffc3\042\uffc3\043\106\044\uffc3" +
    "\045\uffc3\046\111\047\110\050\107\051\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\001\002" +
    "\000\030\012\062\014\044\016\066\030\057\031\060\032" +
    "\050\033\051\034\064\035\047\045\063\052\061\001\002" +
    "\000\030\012\062\014\044\016\066\030\057\031\060\032" +
    "\050\033\051\034\064\035\047\045\063\052\061\001\002" +
    "\000\030\012\062\014\044\016\066\030\057\031\060\032" +
    "\050\033\051\034\064\035\047\045\063\052\061\001\002" +
    "\000\030\012\062\014\044\016\066\030\057\031\060\032" +
    "\050\033\051\034\064\035\047\045\063\052\061\001\002" +
    "\000\056\004\uffb5\005\uffb5\007\uffb5\012\uffb5\013\uffb5\015" +
    "\uffb5\017\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5" +
    "\047\uffb5\050\uffb5\051\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\001\002\000\056\004\uffb4" +
    "\005\uffb4\007\uffb4\012\uffb4\013\uffb4\015\uffb4\017\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\001\002\000\056\004\uffb3\005\uffb3\007\uffb3" +
    "\012\uffb3\013\uffb3\015\uffb3\017\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\053\uffb3" +
    "\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\001" +
    "\002\000\056\004\uffb2\005\uffb2\007\uffb2\012\uffb2\013\uffb2" +
    "\015\uffb2\017\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\001\002\000\056\004" +
    "\uffbe\005\uffbe\007\uffbe\012\uffbe\013\uffbe\015\uffbe\017\uffbe" +
    "\042\uffbe\043\106\044\uffbe\045\uffbe\046\111\047\110\050" +
    "\107\051\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\001\002\000\056\004\uffc1\005\uffc1\007" +
    "\uffc1\012\uffc1\013\uffc1\015\uffc1\017\uffc1\042\uffc1\043\106" +
    "\044\uffc1\045\uffc1\046\111\047\110\050\107\051\uffc1\053" +
    "\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1" +
    "\001\002\000\056\004\uffbf\005\uffbf\007\uffbf\012\uffbf\013" +
    "\uffbf\015\uffbf\017\uffbf\042\uffbf\043\106\044\uffbf\045\uffbf" +
    "\046\111\047\110\050\107\051\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\001\002\000\056" +
    "\004\uffc5\005\uffc5\007\uffc5\012\uffc5\013\uffc5\015\uffc5\017" +
    "\uffc5\042\uffc5\043\106\044\uffc5\045\uffc5\046\111\047\110" +
    "\050\107\051\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\060\uffc5\061\uffc5\001\002\000\056\004\uffbb\005\uffbb" +
    "\007\uffbb\012\uffbb\013\uffbb\015\uffbb\017\uffbb\042\uffbb\043" +
    "\106\044\uffbb\045\uffbb\046\111\047\110\050\107\051\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061" +
    "\uffbb\001\002\000\056\004\uffbd\005\uffbd\007\uffbd\012\uffbd" +
    "\013\uffbd\015\uffbd\017\uffbd\042\uffbd\043\106\044\uffbd\045" +
    "\uffbd\046\111\047\110\050\107\051\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\001\002\000" +
    "\056\004\uffc2\005\uffc2\007\uffc2\012\uffc2\013\uffc2\015\uffc2" +
    "\017\uffc2\042\uffc2\043\106\044\uffc2\045\uffc2\046\111\047" +
    "\110\050\107\051\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\057\uffc2\060\uffc2\061\uffc2\001\002\000\056\004\uffc0\005" +
    "\uffc0\007\uffc0\012\uffc0\013\uffc0\015\uffc0\017\uffc0\042\uffc0" +
    "\043\106\044\uffc0\045\uffc0\046\111\047\110\050\107\051" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\001\002\000\056\004\uffbc\005\uffbc\007\uffbc\012" +
    "\uffbc\013\uffbc\015\uffbc\017\uffbc\042\uffbc\043\106\044\uffbc" +
    "\045\uffbc\046\111\047\110\050\107\051\uffbc\053\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\001\002" +
    "\000\032\012\062\014\044\016\066\030\057\031\060\032" +
    "\050\033\051\034\064\035\047\041\045\045\063\052\061" +
    "\001\002\000\036\007\132\012\071\013\131\042\104\044" +
    "\077\045\070\051\074\053\076\054\101\055\073\056\100" +
    "\057\102\060\075\061\072\001\002\000\046\004\uffb7\005" +
    "\uffb7\007\uffb7\012\uffb7\013\uffb7\015\uffb7\017\uffb7\042\uffb7" +
    "\044\uffb7\045\uffb7\051\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\060\uffb7\061\uffb7\001\002\000\034\012\062" +
    "\013\133\014\044\016\066\030\057\031\060\032\050\033" +
    "\051\034\064\035\047\041\045\045\063\052\061\001\002" +
    "\000\046\004\uffb9\005\uffb9\007\uffb9\012\uffb9\013\uffb9\015" +
    "\uffb9\017\uffb9\042\uffb9\044\uffb9\045\uffb9\051\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\001" +
    "\002\000\034\012\071\013\135\042\104\044\077\045\070" +
    "\051\074\053\076\054\101\055\073\056\100\057\102\060" +
    "\075\061\072\001\002\000\046\004\uffba\005\uffba\007\uffba" +
    "\012\uffba\013\uffba\015\uffba\017\uffba\042\uffba\044\uffba\045" +
    "\uffba\051\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba" +
    "\060\uffba\061\uffba\001\002\000\034\012\071\013\137\042" +
    "\104\044\077\045\070\051\074\053\076\054\101\055\073" +
    "\056\100\057\102\060\075\061\072\001\002\000\046\004" +
    "\uffb8\005\uffb8\007\uffb8\012\uffb8\013\uffb8\015\uffb8\017\uffb8" +
    "\042\uffb8\044\uffb8\045\uffb8\051\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\001\002\000\056" +
    "\004\uffc4\005\uffc4\007\uffc4\012\uffc4\013\uffc4\015\uffc4\017" +
    "\uffc4\042\uffc4\043\106\044\uffc4\045\uffc4\046\111\047\110" +
    "\050\107\051\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057" +
    "\uffc4\060\uffc4\061\uffc4\001\002\000\056\004\uffaf\005\uffaf" +
    "\007\uffaf\012\uffaf\013\uffaf\015\uffaf\017\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061" +
    "\uffaf\001\002\000\006\005\144\013\145\001\002\000\044" +
    "\004\uffc9\005\uffc9\012\071\013\uffc9\015\uffc9\017\uffc9\042" +
    "\104\044\077\045\070\051\074\053\076\054\101\055\073" +
    "\056\100\057\102\060\075\061\072\001\002\000\032\012" +
    "\062\014\044\016\066\030\057\031\060\032\050\033\051" +
    "\034\064\035\047\041\045\045\063\052\061\001\002\000" +
    "\056\004\uffcb\005\uffcb\007\uffcb\012\uffcb\013\uffcb\015\uffcb" +
    "\017\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\001\002\000\044\004\uffca\005" +
    "\uffca\012\071\013\uffca\015\uffca\017\uffca\042\104\044\077" +
    "\045\070\051\074\053\076\054\101\055\073\056\100\057" +
    "\102\060\075\061\072\001\002\000\032\012\062\014\044" +
    "\016\066\030\057\031\060\032\050\033\051\034\064\035" +
    "\047\041\045\045\063\052\061\001\002\000\034\012\071" +
    "\017\151\042\104\044\077\045\070\051\074\053\076\054" +
    "\101\055\073\056\100\057\102\060\075\061\072\001\002" +
    "\000\056\004\uffa6\005\uffa6\007\uffa6\012\uffa6\013\uffa6\015" +
    "\uffa6\017\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\053\uffa6\054\uffa6\055\uffa6\056" +
    "\uffa6\057\uffa6\060\uffa6\061\uffa6\001\002\000\030\012\062" +
    "\014\044\016\066\030\057\031\060\032\050\033\051\034" +
    "\064\035\047\045\063\052\061\001\002\000\056\004\uffb1" +
    "\005\uffb1\007\uffb1\012\uffb1\013\uffb1\015\uffb1\017\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\001\002\000\016\011\uffd4\035\uffd4\062\uffd4" +
    "\064\uffd4\066\uffd4\070\uffd4\001\002\000\036\005\uffc8\012" +
    "\062\014\044\016\066\017\uffc8\030\057\031\060\032\050" +
    "\033\051\034\064\035\047\041\045\045\063\052\061\001" +
    "\002\000\006\005\144\017\157\001\002\000\056\004\uffd5" +
    "\005\uffd5\007\uffd5\012\uffd5\013\uffd5\015\uffd5\017\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\001\002\000\046\004\uffc6\005\uffc6\007\uffc6" +
    "\012\uffc6\013\uffc6\015\uffc6\017\uffc6\042\104\044\uffc6\045" +
    "\uffc6\051\074\053\uffc6\054\101\055\073\056\100\057\102" +
    "\060\075\061\072\001\002\000\006\005\144\015\162\001" +
    "\002\000\056\004\uffcc\005\uffcc\007\uffcc\012\uffcc\013\uffcc" +
    "\015\uffcc\017\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\060\uffcc\061\uffcc\001\002\000\004\035" +
    "\164\001\002\000\062\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\012\uffcd\013\uffcd\015\uffcd\017\uffcd\040\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\001\002\000\014\002\uffe3\010\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\001\002\000\004\011\uffe0\001\002\000\022\020" +
    "\171\021\170\022\177\023\172\024\174\025\200\026\173" +
    "\035\175\001\002\000\014\004\uffff\005\uffff\010\uffff\017" +
    "\uffff\040\uffff\001\002\000\014\004\000\005\000\010\000" +
    "\017\000\040\000\001\002\000\014\004\ufffd\005\ufffd\010" +
    "\ufffd\017\ufffd\040\ufffd\001\002\000\014\004\ufffa\005\ufffa" +
    "\010\ufffa\017\ufffa\040\ufffa\001\002\000\014\004\ufffb\005" +
    "\ufffb\010\ufffb\017\ufffb\040\ufffb\001\002\000\014\004\ufff9" +
    "\005\ufff9\010\ufff9\017\ufff9\040\ufff9\001\002\000\012\004" +
    "\uffef\005\uffef\017\uffef\040\uffef\001\002\000\014\004\ufffe" +
    "\005\ufffe\010\ufffe\017\ufffe\040\ufffe\001\002\000\014\004" +
    "\ufffc\005\ufffc\010\ufffc\017\ufffc\040\ufffc\001\002\000\032" +
    "\012\062\014\044\016\066\030\057\031\060\032\050\033" +
    "\051\034\064\035\047\041\045\045\063\052\061\001\002" +
    "\000\034\012\071\017\203\042\104\044\077\045\070\051" +
    "\074\053\076\054\101\055\073\056\100\057\102\060\075" +
    "\061\072\001\002\000\004\010\204\001\002\000\016\011" +
    "\uffdf\035\047\062\032\064\023\066\036\070\021\001\002" +
    "\000\004\011\206\001\002\000\004\063\207\001\002\000" +
    "\004\010\210\001\002\000\016\011\uffdf\035\047\062\032" +
    "\064\023\066\036\070\021\001\002\000\004\011\212\001" +
    "\002\000\016\011\uffd8\035\uffd8\062\uffd8\064\uffd8\066\uffd8" +
    "\070\uffd8\001\002\000\016\011\uffdd\035\uffdd\062\uffdd\064" +
    "\uffdd\066\uffdd\070\uffdd\001\002\000\004\011\216\001\002" +
    "\000\016\011\uffe2\035\uffe2\062\uffe2\064\uffe2\066\uffe2\070" +
    "\uffe2\001\002\000\014\002\uffe4\010\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\001\002\000\032\012\062\014\044\016\066\030" +
    "\057\031\060\032\050\033\051\034\064\035\047\041\045" +
    "\045\063\052\061\001\002\000\034\004\221\012\071\042" +
    "\104\044\077\045\070\051\074\053\076\054\101\055\073" +
    "\056\100\057\102\060\075\061\072\001\002\000\016\011" +
    "\uffd2\035\uffd2\062\uffd2\064\uffd2\066\uffd2\070\uffd2\001\002" +
    "\000\016\011\uffdf\035\047\062\032\064\023\066\036\070" +
    "\021\001\002\000\004\011\224\001\002\000\004\065\225" +
    "\001\002\000\004\016\226\001\002\000\032\012\062\014" +
    "\044\016\066\030\057\031\060\032\050\033\051\034\064" +
    "\035\047\041\045\045\063\052\061\001\002\000\034\012" +
    "\071\017\230\042\104\044\077\045\070\051\074\053\076" +
    "\054\101\055\073\056\100\057\102\060\075\061\072\001" +
    "\002\000\004\004\231\001\002\000\016\011\uffd6\035\uffd6" +
    "\062\uffd6\064\uffd6\066\uffd6\070\uffd6\001\002\000\032\012" +
    "\062\014\044\016\066\030\057\031\060\032\050\033\051" +
    "\034\064\035\047\041\045\045\063\052\061\001\002\000" +
    "\034\012\071\017\234\042\104\044\077\045\070\051\074" +
    "\053\076\054\101\055\073\056\100\057\102\060\075\061" +
    "\072\001\002\000\004\067\235\001\002\000\004\010\236" +
    "\001\002\000\016\011\uffdf\035\047\062\032\064\023\066" +
    "\036\070\021\001\002\000\004\011\240\001\002\000\016" +
    "\011\uffd7\035\uffd7\062\uffd7\064\uffd7\066\uffd7\070\uffd7\001" +
    "\002\000\012\010\ufff5\035\ufff5\036\ufff5\037\ufff5\001\002" +
    "\000\004\002\ufff8\001\002\000\004\004\246\001\002\000" +
    "\036\004\uffc8\005\uffc8\012\062\014\044\016\066\030\057" +
    "\031\060\032\050\033\051\034\064\035\047\041\045\045" +
    "\063\052\061\001\002\000\006\004\uffed\005\144\001\002" +
    "\000\024\010\uffee\011\uffee\035\uffee\036\uffee\037\uffee\062" +
    "\uffee\064\uffee\066\uffee\070\uffee\001\002\000\004\007\250" +
    "\001\002\000\006\004\uffe7\035\012\001\002\000\010\004" +
    "\uffe5\005\254\017\uffe5\001\002\000\004\004\253\001\002" +
    "\000\012\010\uffeb\035\uffeb\036\uffeb\037\uffeb\001\002\000" +
    "\004\035\012\001\002\000\006\004\uffe8\017\uffe8\001\002" +
    "\000\010\004\uffe5\005\254\017\uffe5\001\002\000\006\004" +
    "\uffe6\017\uffe6\001\002\000\004\016\261\001\002\000\006" +
    "\017\uffe7\035\012\001\002\000\004\017\263\001\002\000" +
    "\004\007\264\001\002\000\024\020\171\021\170\022\177" +
    "\023\172\024\174\025\200\026\173\027\266\035\175\001" +
    "\002\000\004\010\020\001\002\000\004\010\uffea\001\002" +
    "\000\004\010\uffe9\001\002\000\012\010\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\022\016\016\017\014\022\004\025\015\027" +
    "\003\030\005\031\006\042\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\242\001\001\000" +
    "\016\016\016\017\014\022\004\027\240\030\005\031\241" +
    "\001\001\000\002\001\001\000\032\010\026\016\036\017" +
    "\014\026\027\032\034\033\033\034\021\035\024\036\025" +
    "\037\023\040\030\041\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\026\016\214\017\014\032\213\033\033\034\021\035\024" +
    "\036\025\037\023\040\030\041\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\026" +
    "\032\165\033\033\034\021\035\024\036\025\037\023\040" +
    "\030\041\037\001\001\000\002\001\001\000\024\003\051" +
    "\004\042\005\055\006\053\007\054\010\040\012\064\013" +
    "\052\040\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\142\004\042\005\055\006\053\007\054\010\040" +
    "\012\064\013\052\014\160\040\045\001\001\000\024\003" +
    "\157\004\042\005\055\006\053\007\054\010\040\012\064" +
    "\013\052\040\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\142\004\042\005\055\006\053\007" +
    "\054\010\040\012\064\013\052\014\141\040\045\001\001" +
    "\000\016\004\042\007\140\010\040\012\064\013\052\040" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\066\004\042\005\055\006\053\007\054\010\040\012" +
    "\064\013\052\040\045\001\001\000\002\001\001\000\022" +
    "\004\042\005\137\006\053\007\054\010\040\012\064\013" +
    "\052\040\045\001\001\000\024\003\127\004\042\005\055" +
    "\006\053\007\054\010\040\012\064\013\052\040\045\001" +
    "\001\000\022\004\042\005\125\006\053\007\054\010\040" +
    "\012\064\013\052\040\045\001\001\000\022\004\042\005" +
    "\124\006\053\007\054\010\040\012\064\013\052\040\045" +
    "\001\001\000\022\004\042\005\123\006\053\007\054\010" +
    "\040\012\064\013\052\040\045\001\001\000\022\004\042" +
    "\005\122\006\053\007\054\010\040\012\064\013\052\040" +
    "\045\001\001\000\022\004\042\005\121\006\053\007\054" +
    "\010\040\012\064\013\052\040\045\001\001\000\022\004" +
    "\042\005\120\006\053\007\054\010\040\012\064\013\052" +
    "\040\045\001\001\000\022\004\042\005\117\006\053\007" +
    "\054\010\040\012\064\013\052\040\045\001\001\000\022" +
    "\004\042\005\116\006\053\007\054\010\040\012\064\013" +
    "\052\040\045\001\001\000\022\004\042\005\115\006\053" +
    "\007\054\010\040\012\064\013\052\040\045\001\001\000" +
    "\002\001\001\000\022\004\042\005\104\006\053\007\054" +
    "\010\040\012\064\013\052\040\045\001\001\000\002\001" +
    "\001\000\020\004\042\006\114\007\054\010\040\012\064" +
    "\013\052\040\045\001\001\000\020\004\042\006\113\007" +
    "\054\010\040\012\064\013\052\040\045\001\001\000\020" +
    "\004\042\006\112\007\054\010\040\012\064\013\052\040" +
    "\045\001\001\000\020\004\042\006\111\007\054\010\040" +
    "\012\064\013\052\040\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\135\004" +
    "\042\005\055\006\053\007\054\010\040\012\064\013\052" +
    "\040\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\133\004\042\005\055\006\053\007\054\010\040" +
    "\012\064\013\052\040\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\145\004\042\005\055" +
    "\006\053\007\054\010\040\012\064\013\052\040\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\147" +
    "\004\042\005\055\006\053\007\054\010\040\012\064\013" +
    "\052\040\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\042\006\152\007\054\010\040\012\064\013" +
    "\052\040\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\142\004\042\005\055\006\053\007\054\010" +
    "\040\012\064\013\052\014\155\040\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\201\004\042\005\055\006\053\007\054\010\040\012" +
    "\064\013\052\040\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\010\026\032\204\033\033\034\021\035" +
    "\024\036\025\037\023\040\030\041\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\026\032\210\033\033\034\021\035\024\036\025\037\023" +
    "\040\030\041\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\217\004\042\005\055\006" +
    "\053\007\054\010\040\012\064\013\052\040\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\026\032" +
    "\222\033\033\034\021\035\024\036\025\037\023\040\030" +
    "\041\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\226\004\042\005\055\006\053" +
    "\007\054\010\040\012\064\013\052\040\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\232\004\042\005\055\006\053\007\054\010\040\012" +
    "\064\013\052\040\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\026\032\236\033" +
    "\033\034\021\035\024\036\025\037\023\040\030\041\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\142" +
    "\004\042\005\055\006\053\007\054\010\040\012\064\013" +
    "\052\014\244\040\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\250\023\251\001" +
    "\001\000\004\024\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\255\001\001\000\002\001\001\000" +
    "\004\024\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\250\023\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\266\021\264\001\001\000\004" +
    "\031\267\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // final ::= list 
            {
              FinalNode RESULT =null;
		int lisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListNode lis = (ListNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lis;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // final ::= tuple 
            {
              FinalNode RESULT =null;
		int tupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tupright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TupleNode tup = (TupleNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tup;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // final ::= STRINGLITERAL 
            {
              FinalNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String s = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLitNode(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // final ::= LENGTH LEFTPAREN expression RIGHTPAREN 
            {
              FinalNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LengthNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // final ::= function_call 
            {
              FinalNode RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncCallNode func = (FuncCallNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = func;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // final ::= CHARLITERAL 
            {
              FinalNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CharNode(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // final ::= BOOLLITERAL 
            {
              FinalNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolNode(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // final ::= FLOATLITERAL 
            {
              FinalNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatNode(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // final ::= INTLITERAL 
            {
              FinalNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntNode(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // final ::= LEFTPAREN expression RIGHTPAREN 
            {
              FinalNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BrkExprNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // final ::= accessor 
            {
              FinalNode RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int accright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccessorNode acc = (AccessorNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = acc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exponent ::= final 
            {
              ExponentNode RESULT =null;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FinalNode fin = (FinalNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fin;
			//System.out.println("Created final:fin looks like " + fin.toString());
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exponent",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exponent ::= MINUS exponent 
            {
              ExponentNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExponentNode exp = (ExponentNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinExponentNode(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exponent",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= exponent 
            {
              FactorNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExponentNode exp = (ExponentNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= exponent POWER factor 
            {
              FactorNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExponentNode exp = (ExponentNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorNode fac = (FactorNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PowerNode(exp,fac); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // term ::= term AND factor 
            {
              TermNode RESULT =null;
		int trmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TermNode trm = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorNode fac = (FactorNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndNode(trm,fac); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // term ::= term POWER factor 
            {
              TermNode RESULT =null;
		int trmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TermNode trm = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorNode fac = (FactorNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PowerTermNode(trm,fac); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // term ::= term DIVIDE factor 
            {
              TermNode RESULT =null;
		int trmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TermNode trm = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorNode fac = (FactorNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivideNode(trm,fac); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // term ::= term MULTIPLY factor 
            {
              TermNode RESULT =null;
		int trmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TermNode trm = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorNode fac = (FactorNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultiplyNode(trm,fac); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // term ::= factor 
            {
              TermNode RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorNode fac = (FactorNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fac; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression LEFTBRACKET expression RIGHTBRACKET 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NoColNode(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression LEFTBRACKET COLON expression RIGHTBRACKET 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BegColNode(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression LEFTBRACKET expression COLON RIGHTBRACKET 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new EndColNode(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression LEFTBRACKET expression COLON expression RIGHTBRACKET 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e3 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ThreeExprNode(e1,e2,e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression CONCAT term 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConcatNode(e,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression NOTEQUAL term 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqNode(e,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression EQUAL term 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqNode(e,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression GREATERTHANEQUAL term 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreatThEqNode(e,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression GREATERTHAN term 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreatThNode(e,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression LESSTHANEQUAL term 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThEqNode(e,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression LESSTHAN term 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThNode(e,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression IN term 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InNode(e,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression OR term 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrNode(e,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression MINUS term 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusNode(e,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression PLUS term 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlusNode(e,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= NOT expression 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotExprNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= term 
            {
              ExprNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression_clist ::= 
            {
              ExprListNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_clist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression_clist ::= expression 
            {
              ExprListNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		if(e!=null)	
		 {//System.out.println("after here2"+e);
                   RESULT = new ExprListNode(e); 
		}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_clist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression_clist ::= expression_clist COMMA expression 
            {
              ExprListNode RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprListNode elist = (ExprListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		         //System.out.println("after here"+e);
		if (elist == null) {
			//System.out.println("elist is NULL!");
			elist = new ExprListNode(e);		// This line might be a bad idea... Trying to fix null pointer prob
		} else {
			elist.expressions.add(e);
		}
		RESULT = elist;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_clist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list ::= LEFTBRACKET expression_clist RIGHTBRACKET 
            {
              ListNode RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprListNode elist = (ExprListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ListNode(elist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tuple ::= LEFTTBRACKET expression_clist RIGHTTBRACKET 
            {
              TupleNode RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprListNode elist = (ExprListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TupleNode(elist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // accessor ::= accessor DOT ID 
            {
              AccessorNode RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AccessorNode acc = (AccessorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(acc !=null) {
		acc.ids.add(d);
		RESULT = acc;
		}
		else
		{
                   RESULT = new AccessorNode(d);}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accessor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // accessor ::= ID 
            {
              AccessorNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT = new AccessorNode(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accessor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sequence ::= list 
            {
              SequenceNode RESULT =null;
		int lisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListNode lis = (ListNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lis;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sequence ::= tuple 
            {
              SequenceNode RESULT =null;
		int tupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tupright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TupleNode tup = (TupleNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tup;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sequence ::= STRINGLITERAL 
            {
              SequenceNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String s = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					//System.out.println("Found a string liter : " + s);
					RESULT = new StringLitNode(s);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignment ::= accessor ASSIGN expression SEMICOLON 
            {
              AssignNode RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AccessorNode acc = (AccessorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignNode(e,acc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // return ::= RETURN SEMICOLON 
            {
              ReturnStmtNode RESULT =null;
		 RESULT = new ReturnStmtNode(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // return ::= RETURN expression SEMICOLON 
            {
              ReturnStmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmtNode(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_call ::= ID LEFTPAREN expression_clist RIGHTPAREN 
            {
              FuncCallNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprListNode elist = (ExprListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncCallNode(elist,id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // repeatuntil ::= REPEAT LEFTBRACE statement_list RIGHTBRACE UNTIL LEFTPAREN expression RIGHTPAREN SEMICOLON 
            {
              RptUntilNode RESULT =null;
		int stlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int stlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		StatementListNode stlist = (StatementListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RptUntilNode(e,stlist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeatuntil",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // while ::= WHILE LEFTPAREN expression RIGHTPAREN DO LEFTBRACE statement_list RIGHTBRACE 
            {
              WhileStmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementListNode stlist = (StatementListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStmtNode(e,stlist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ifelse ::= IF LEFTPAREN expression RIGHTPAREN LEFTBRACE statement_list RIGHTBRACE ELSE LEFTBRACE statement_list RIGHTBRACE 
            {
              IfElseNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int stlist1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stlist1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		StatementListNode stlist1 = (StatementListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stlist2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stlist2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementListNode stlist2 = (StatementListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseNode(e,stlist1,stlist2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifelse",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= return 
            {
              StmtNode RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnStmtNode ret = (ReturnStmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ret;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= repeatuntil 
            {
              StmtNode RESULT =null;
		int rptuntilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rptuntilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RptUntilNode rptuntil = (RptUntilNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rptuntil;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= while 
            {
              StmtNode RESULT =null;
		int whileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStmtNode whi = (WhileStmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = whi;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= ifelse 
            {
              StmtNode RESULT =null;
		int ifelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfElseNode ifel = (IfElseNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ifel;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= function_call SEMICOLON 
            {
              StmtNode RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncCallNode func = (FuncCallNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncCallStmtNode(func);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= assignment 
            {
              StmtNode RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignNode ass = (AssignNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ass;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_list ::= 
            {
              StatementListNode RESULT =null;
		RESULT = new StatementListNode(new ArrayList<StmtNode>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_list ::= statement statement_list 
            {
              StatementListNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtNode s = (StmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementListNode stlist = (StatementListNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (stlist != null) {
                       stlist.statements.add(s);
                       RESULT = new StatementListNode(stlist.statements);
                      
                   } else {
                       ArrayList<StmtNode> res = new ArrayList<StmtNode>();
                       res.add(s);
                       RESULT = new StatementListNode(res);
                   }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // local_decl_list ::= var_decl 
            {
              DeclListNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode v = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       RESULT = new DeclListNode(v);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_decl_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // local_decl_list ::= local_decl_list var_decl 
            {
              DeclListNode RESULT =null;
		int declistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclListNode declist = (DeclListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode v = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (declist != null) {
                       declist.declarations.add(v);
                       RESULT = declist;
                       
                   } else {
                       
                       RESULT = new DeclListNode(v);
                   }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_decl_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // block ::= LEFTBRACE statement_list RIGHTBRACE 
            {
              BlockNode RESULT =null;
		int stlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementListNode stlist = (StatementListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BlockNode(stlist,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // block ::= LEFTBRACE local_decl_list statement_list RIGHTBRACE 
            {
              BlockNode RESULT =null;
		int declistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclListNode declist = (DeclListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementListNode stlist = (StatementListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BlockNode(stlist,declist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter_clist2 ::= 
            {
              ParamListNode RESULT =null;
		 RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_clist2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameter_clist2 ::= COMMA var_type parameter_clist2 
            {
              ParamListNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarTypeNode v = (VarTypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamListNode parlist = (ParamListNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (parlist != null) {
                       parlist.params.add(v);
                       RESULT = new ParamListNode(parlist.params);
                       
                   } else {
                       ArrayList<VarTypeNode> res = new ArrayList<VarTypeNode>();
                       res.add(v);
                       RESULT = new ParamListNode(res);
                   }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_clist2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameter_clist ::= 
            {
              ParamListNode RESULT =null;
		 RESULT= null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_clist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameter_clist ::= var_type parameter_clist2 
            {
              ParamListNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarTypeNode v = (VarTypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamListNode parlist = (ParamListNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (parlist != null) {
                       parlist.params.add(v);
                       RESULT = new ParamListNode(parlist.params);
                       
                   } else {
                       ArrayList<VarTypeNode> res = new ArrayList<VarTypeNode>();
                       res.add(v);
                       RESULT = new ParamListNode(res);
                   }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_clist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function_type ::= type 
            {
              TypeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_type ::= VOID 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode("void");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // datatype_decl ::= TDEF ID COLON parameter_clist SEMICOLON 
            {
              DatatypeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamListNode parlist = (ParamListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	//System.out.println("CUP: Tdef found");
	RESULT = new DatatypeNode(parlist,id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datatype_decl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_init ::= 
            {
              ExprListNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_init",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_init ::= ASSIGN expression_clist 
            {
              ExprListNode RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprListNode elist = (ExprListNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = elist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_init",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_decl ::= var_type var_init SEMICOLON 
            {
              VarDeclNode RESULT =null;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarTypeNode vtype = (VarTypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vinitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vinitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprListNode vinit = (ExprListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclNode(vinit,vtype);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_type ::= ID COLON type 
            {
              VarTypeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeNode tp = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarTypeNode(tp,id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_decl ::= FDEF ID LEFTPAREN parameter_clist RIGHTPAREN COLON function_type block 
            {
              FuncDeclNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParamListNode paramlist = (ParamListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ftypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ftyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeNode ftype = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockNode blk = (BlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncDeclNode(paramlist,id,ftype,blk);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // global_decl ::= function_decl 
            {
              DeclNode RESULT =null;
		int funcdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDeclNode funcdecl = (FuncDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = funcdecl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // global_decl ::= var_decl 
            {
              DeclNode RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode vardecl = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vardecl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // global_decl ::= datatype_decl 
            {
              DeclNode RESULT =null;
		int datadeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int datadeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DatatypeNode datadecl = (DatatypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = datadecl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // global_decl_list ::= global_decl 
            {
              DeclListNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclNode v = (DeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       RESULT = new DeclListNode(v);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // global_decl_list ::= global_decl_list global_decl 
            {
              DeclListNode RESULT =null;
		int declistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclListNode declist = (DeclListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclNode v = (DeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (declist != null) {
                       declist.declarations.add(v);
                       RESULT = declist;
                       
                   } else {
                       
                       RESULT = new DeclListNode(v);
                   }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program ::= error 
            {
              ProgramNode RESULT =null;
		System.out.print("Error");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program ::= block 
            {
              ProgramNode RESULT =null;
		int blkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockNode blk = (BlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new ProgramNode(blk,null);System.out.println("Parsing Complete"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program ::= global_decl_list block 
            {
              ProgramNode RESULT =null;
		int glbdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int glbdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclListNode glbdecl = (DeclListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockNode blk = (BlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramNode(blk,glbdecl);System.out.println("Parsing Complete"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= ID 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode("id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= TUPLE 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode("tuple");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= LIST 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode("list");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= CHAR 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode("char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= STRING 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode("string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= FLOAT 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode("float");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= INT 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode("int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // type ::= BOOL 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode("bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

